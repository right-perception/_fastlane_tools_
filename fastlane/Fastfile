default_platform(:ios)

platform :ios do

  desc "Build application"
  lane :build do
    
    if is_ci?
      ci_jenkins
      ci_swiftlint
    end
    
    gym_config = ENV["GYM_CONFIG"]
    if gym_config.nil?
    	gym_config = "Release"
    end
    
    match(readonly: is_ci)
    
    clear_derived_data
    xcversion(version: "~> 13.0")
    cocoapods(try_repo_update_on_error: true)
    set_long_app_version
    gym(skip_package_dependencies_resolution: true, configuration: gym_config)
    
    diawi_upload
    slack_success_notify
  end
  
  desc "Jenkins integration"
  private_lane :ci_jenkins do
    setup_jenkins(
      keychain_path: ENV["KEYCHAIN_PATH"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"]
    )
  end
  
  desc "Swiftlint check"
  private_lane :ci_swiftlint do
	swiftlint(
	  mode: :lint,
	  output_file: "swiftlint.result.html",
	  ignore_exit_status: false,
	  reporter: "html",
	  quiet: true
	)
  end
  
  desc "Set long described app version for development build"
  lane :set_long_app_version do
    export_method = ENV["GYM_EXPORT_METHOD"]
	
    if export_method.nil?
      puts "Environment GYM_EXPORT_METHOD is missed"
	elsif export_method == "development"
	  if ENV["APP_VERSION_INFO_PLIST"].nil?
        puts "Environment APP_VERSION_INFO_PLIST is missed"
      elsif ENV["APP_TARGET"].nil?
        puts "Environment APP_TARGET is missed"
      else
        set_long_described_app_version(target: ENV["APP_TARGET"], info_plist: ENV["APP_VERSION_INFO_PLIST"])
      end
    else 
      puts "Export method is #{export_method}, skip!"
    end
  end


  desc "Set long described app version for development build job"
  private_lane :set_long_described_app_version do |options|
    app_target = options[:target]
	
	current_app_version = get_version_number(target: app_target)
	
	commits_count = sh("git", "rev-list", "--remotes", "--count").strip
	commit_hash = sh("git", "rev-parse", "--short", "HEAD").strip
	commit_branch = sh("git", "rev-parse", "--abbrev-ref", "HEAD").strip.split('/').last
	
	puts "Current version: " + current_app_version
	puts "Commit counts: " + commits_count
	puts "Hash: " + commit_hash
	puts "App: " + app_target
	puts "Branch: " + commit_branch
	
	new_app_version = "#{current_app_version}.#{commits_count}.#{commit_hash}_#{app_target}_#{commit_branch}"
	puts "New App Version: " + new_app_version
	
	correct_plist_path = options[:info_plist].gsub(/\s/,'\\ ')
	sh("/usr/libexec/PlistBuddy -c \"Set :CFBundleShortVersionString #{new_app_version}\" #{correct_plist_path}")
  end
  
  desc "Upload to Diawi"
  private_lane :diawi_upload do
  	diawi(
  		token: ENV["DIAWI_TOKEN"],
  		file: lane_context[SharedValues::IPA_OUTPUT_PATH],
  		find_by_udid: true,
  		wall_of_apps: false,
  		timeout: 30,
  		check_status_delay: 5
  	)
  end
  
  desc "Slack notify"
  lane :slack_success_notify do
  	@app_name = ENV["APP_NAME"]
  	@job_number = ENV["JENKINS_BUILD_NUMBER"]
	@job_url = ENV["JENKINS_BUILD_URL"]
  	slack(
  		message: "<#@job_url|#@app_name (##@job_number)>",
  		channel: ENV["SLACK_CHANNEL"],
  		slack_url: ENV["SLACK_URL"],
  		icon_url: "https://is3-ssl.mzstatic.com/image/thumb/Purple113/v4/19/63/6b/19636bb4-d6d3-f8bd-4604-9f42945e8d0d/source/60x60bb.jpg",
  		default_payloads: ["git_branch", "last_git_commit"],
  		attachment_properties: {
  			fields: [
  			{
  				title: "Собрал(а)",
  				value: ENV["JENKINS_BUILD_USER"],
  				short: true
  			},
  			{
  				title: "Ссылка на установку",
  				value: lane_context[SharedValues::UPLOADED_FILE_LINK_TO_DIAWI],
  				short: true
  			}
  			]
  		}
  	)
  end  
end
