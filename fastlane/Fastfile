default_platform :ios

platform :ios do

  desc "Build application"
  lane :build do
    
    gym_config = ENV["GYM_CONFIG"]
    if gym_config.nil?
    	gym_config = "Release"
    end
	
	xcversion(version: "~> 13.0")    
    match(readonly: is_ci)    
    clear_derived_data
    update_cocoapods_if_needed
    set_long_app_version_if_needed
    gym(configuration: gym_config)
	  
    telegram_success_notify
  end
	
  private_lane :update_cocoapods_if_needed do
    rootPath = File.expand_path("..", Dir.pwd)
    podFilePath = rootPath + '/Podfile'

    if File.file?(podFilePath)
      cocoapods(try_repo_update_on_error: true)
    end 
  end
  
  desc "Set long described app version for development build"
  lane :set_long_app_version_if_needed do
    export_method = ENV["GYM_EXPORT_METHOD"]
	
    if export_method.nil?
      puts "Environment GYM_EXPORT_METHOD is missed"
	elsif export_method == "development"
	  if ENV["APP_VERSION_INFO_PLIST"].nil?
        puts "Environment APP_VERSION_INFO_PLIST is missed"
      elsif ENV["APP_TARGET"].nil?
        puts "Environment APP_TARGET is missed"
      else
        set_long_described_app_version(target: ENV["APP_TARGET"], info_plist: ENV["APP_VERSION_INFO_PLIST"])
      end
    else 
      puts "Export method is #{export_method}, skip!"
    end
  end


  desc "Set long described app version for development build job"
  private_lane :set_long_described_app_version do |options|
    app_target = options[:target]
	
	current_app_version = get_version_number(target: app_target)
	
	commits_count = sh("git", "rev-list", "--remotes", "--count").strip
	commit_hash = sh("git", "rev-parse", "--short", "HEAD").strip
	
	isGitlabCI = ENV["GITLAB_CI"]
    	if isGitlabCI.nil?
	  commit_branch = sh("git", "rev-parse", "--abbrev-ref", "HEAD").strip.split('/').last
	else
	  commit_branch = ENV["CI_COMMIT_REF_NAME"]
    	end

	puts "Current version: " + current_app_version
	puts "Commit counts: " + commits_count
	puts "Hash: " + commit_hash
	puts "App: " + app_target
	puts "Branch: " + commit_branch
	
	new_app_version = "#{current_app_version}.#{commits_count}.#{commit_hash}_#{app_target}_#{commit_branch}"
	puts "New App Version: " + new_app_version
	
	correct_plist_path = options[:info_plist].gsub(/\s/,'\\ ')
	sh("/usr/libexec/PlistBuddy -c \"Set :CFBundleShortVersionString #{new_app_version}\" #{correct_plist_path}")
  end
	
  desc "Telegram notify"
  lane :telegram_success_notify do
	unless ENV['TG_BOT_TOKEN'].nil? and ENV['TG_CHAT_ID'].nil?
		telegram(
			token: ENV['TG_BOT_TOKEN'],
			chat_id: ENV['TG_CHAT_ID'],
			parse_mode: "HTML",
			text: ENV['TG_CHAT_TEXT']
		)
	end
  end
  
  desc "Download dSYM files from iTC and upload to Crashlytics. (Apple generates new dSYM when a build is uploaded with bitcode enabled)."
  lane :refresh_dsyms do
    download_dsyms(min_version: "1.0")                           # Download dSYM files from AppStore Connect
    upload_symbols_to_crashlytics(app_id: ENV["GOOGLE_APP_ID"])   # Upload them to Firebase Crashlytics
    clean_build_artifacts                                        # Delete the local dSYM files
  end  
  
  desc "Get certificates, pass 'dist:true' for distribution, create:true' for creation, 'force:true' to force"
  lane :certificates do |options|
    match(
      type: options[:dist] ? ENV["MATCH_TYPE"] : "development",
      readonly: options[:create] ? false : true,
      force: options[:force] ? true : false,
      force_for_new_devices: options[:create] ? true : false
    )
  end
  
  desc "Register new device"
  lane :register_new_device do  |options|
      device_name = prompt(text: "Enter the device name: ")
      device_udid = prompt(text: "Enter the device UDID: ")
      device_hash = {}
      device_hash[device_name] = device_udid
      register_devices(devices: device_hash)
      certificates(
        create:true
      )
  end
end
